ReadsRaw <- column_to_rownames(ReadsRaw, "miRNA")
ReadsRaw <- ReadsRaw[,grepl("READs",colnames(ReadsRaw))]
colnames(ReadsRaw)=gsub("-READs","", colnames(ReadsRaw))
ReadsRaw <- ReadsRaw[complete.cases(ReadsRaw),]
data <- list(Readsraw=ReadsRaw, metaRaw=metaRaw)
ReadsRaw <-read.xlsx(inFile$Readspath, sheet="miRNA_piRNA")
ReadsRaw <-read.xlsx(input$Readsfile, sheet="miRNA_piRNA")
req(inFile)
input=c()
input$Readsfile="./data/QiagenSummary.xlsx"
input$Samplefile = "./data/Meta_Dummy_A549 V14.all_samples.summary.xlsx"
input$submit = TRUE
input$sampleID =   "SampleID"
input$target = "Target"
input$treatment = "Stim"
input$covariates = c("Gender", "confounder", "confounder2")
input$reads.cutoff = 100000
input$p.cut = 0.05
input$cor.cut = 0.8
input$run_now = T
input$mincount = 10
metaRaw <-read.xlsx(input$Samplefile, sheet=1)
ReadsRaw <-read.xlsx(input$Readsfile, sheet="miRNA_piRNA")
ReadsRaw <- remove_rownames(ReadsRaw)
ReadsRaw <- column_to_rownames(ReadsRaw, "miRNA")
ReadsRaw <- ReadsRaw[,grepl("READs",colnames(ReadsRaw))]
colnames(ReadsRaw)=gsub("-READs","", colnames(ReadsRaw))
ReadsRaw <- ReadsRaw[complete.cases(ReadsRaw),]
data <- list(Readsraw=ReadsRaw, metaRaw=metaRaw)
metaRaw <- data[["metaRaw"]]
Reads <- data[["ReadsRaw"]]
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
meta <-  meta[Samples, ]
Reads <- Reads[,Samples]
meta$group <- as.factor(meta[,input$target])
meta$group <- meta$group %>% relevel(ref=input$treatment)
meta$totalReads <- colSums(Reads, na.rm=T)
idxRm <- meta$totalReads < as.numeric(input$reads.cutoff)
Remove <- colnames(Reads)[idxRm]
Reads <- Reads[,!idxRm]
meta <- meta[!idxRm,]
covars = input$covariates
exclude = names(which(apply(meta %>% select(all_of(covars)), 2, function(x){length(unique(x))})==1))
covars=covars[! covars %in% exclude]
if(length(input$covariates)>0){
modelform=as.formula(paste0("~1+",paste0(covars, sep="", collapse="+"), "+group"))
}else {
modelform=as.formula("~group")
}
dds <- DESeqDataSetFromMatrix(Reads, colData = meta, design = modelform)
keep <- rowSums(counts(dds)) >= input$mincount
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- DESeq(dds, fitType = "local", test = "Wald")
NReads <- counts(dds, normalized=T)
metaRaw <- data[["metaRaw"]]
Reads <- data[["ReadsRaw"]]
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
meta <-  meta[Samples, ]
Reads <- Reads[,Samples]
meta$group <- as.factor(meta[,input$target])
meta$group <- meta$group %>% relevel(ref=input$treatment)
input$treatment
meta
metaRaw <- data[["metaRaw"]]
metaRaw
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
metaRaw
req(input$target)
!is.na(metaRaw[,input$target])
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
meta
colnames(Reads)
data[["ReadsRaw"]]
data <- list(ReadsRaw=ReadsRaw, metaRaw=metaRaw)
metaRaw <- data[["metaRaw"]]
Reads <- data[["ReadsRaw"]]
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
meta <-  meta[Samples, ]
Reads <- Reads[,Samples]
meta$group <- as.factor(meta[,input$target])
meta$group <- meta$group %>% relevel(ref=input$treatment)
meta$totalReads <- colSums(Reads, na.rm=T)
idxRm <- meta$totalReads < as.numeric(input$reads.cutoff)
Remove <- colnames(Reads)[idxRm]
Reads <- Reads[,!idxRm]
meta <- meta[!idxRm,]
covars = input$covariates
exclude = names(which(apply(meta %>% select(all_of(covars)), 2, function(x){length(unique(x))})==1))
covars=covars[! covars %in% exclude]
if(length(input$covariates)>0){
modelform=as.formula(paste0("~1+",paste0(covars, sep="", collapse="+"), "+group"))
}else {
modelform=as.formula("~group")
}
dds <- DESeqDataSetFromMatrix(Reads, colData = meta, design = modelform)
metaRaw <- data[["metaRaw"]]
metaRaw
Reads
data[["ReadsRaw"]]
Reads <- data[["ReadsRaw"]]
Reads
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
Samples
colnames(Reads)
rownames(meta)
input$sampleID
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
metaRaw
metaRaw <- data[["metaRaw"]]
metaRaw
metaRaw <-read.xlsx(input$Samplefile, sheet=1)
data <- list(ReadsRaw=ReadsRaw, metaRaw=metaRaw)
metaRaw <- data[["metaRaw"]]
Reads <- data[["ReadsRaw"]]
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
meta <-  meta[Samples, ]
Reads <- Reads[,Samples]
Samples
meta$group <- as.factor(meta[,input$target])
meta$group <- meta$group %>% relevel(ref=input$treatment)
meta$totalReads <- colSums(Reads, na.rm=T)
idxRm <- meta$totalReads < as.numeric(input$reads.cutoff)
Remove <- colnames(Reads)[idxRm]
Reads <- Reads[,!idxRm]
meta <- meta[!idxRm,]
covars = input$covariates
exclude = names(which(apply(meta %>% select(all_of(covars)), 2, function(x){length(unique(x))})==1))
covars=covars[! covars %in% exclude]
if(length(input$covariates)>0){
modelform=as.formula(paste0("~1+",paste0(covars, sep="", collapse="+"), "+group"))
}else {
modelform=as.formula("~group")
}
dds <- DESeqDataSetFromMatrix(Reads, colData = meta, design = modelform)
keep <- rowSums(counts(dds)) >= input$mincount
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- DESeq(dds, fitType = "local", test = "Wald")
NReads <- counts(dds, normalized=T)
cs <- colSums(log(NReads+1))
options(contrasts = c("contr.sum","contr.poly"))
mod <- lm(cs~ meta$group)
AOV <- drop1(mod, .~., test="F")
p.val <- AOV$`Pr(>F)`[2]
sig <- c()
if(p.val>0.05){
sig="not-significant"
} else {
sig="significant"
}
res <- compareGroups::compareGroups(group ~ ., meta[,c("group",input$target, input$covariates)])
restab <- createTable(res, hide.no = "no")
restab_DEseq <- results(dds)
restab_DEseq <- restab_DEseq[order(restab_DEseq$pvalue),]
restab_DEseq
shiny::runApp()
exit
q("no")
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
shiny::runApp()
myvalues <-reactiveValues()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
myvalues <-reactiveValues(
ReadsRaw=NULL,
metaRaw=NULL,
dds=NULL,
meta=NULL,
Reads=NULL,
NReads=NULL,
exclude=NULL,
sigReaddiff=NULL,
covariateComp=NULL,
Remove=NULL,
restab_DEseq=NULL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(gplots)
input=c()
input$Readsfile="./data/QiagenSummary.xlsx"
input$Samplefile = "./data/Meta_Dummy_A549 V14.all_samples.summary.xlsx"
input$submit = TRUE
input$sampleID =   "SampleID"
input$target = "Target"
input$treatment = "Stim"
input$covariates = c("Gender", "confounder", "confounder2")
input$reads.cutoff = 100000
input$p.cut = 0.05
input$cor.cut = 0.8
input$run_now = T
input$mincount = 10
metaRaw <-read.xlsx(input$Samplefile, sheet=1)
ReadsRaw <-read.xlsx(input$Readsfile, sheet="miRNA_piRNA")
myvalues <-reactiveValues(
ReadsRaw=NULL,
metaRaw=NULL,
dds=NULL,
meta=NULL,
Reads=NULL,
NReads=NULL,
exclude=NULL,
sigReaddiff=NULL,
covariateComp=NULL,
Remove=NULL,
restab_DEseq=NULL)
ReadsRaw <- remove_rownames(ReadsRaw)
ReadsRaw <- column_to_rownames(ReadsRaw, "miRNA")
ReadsRaw <- ReadsRaw[,grepl("READs",colnames(ReadsRaw))]
colnames(ReadsRaw)=gsub("-READs","", colnames(ReadsRaw))
ReadsRaw <- ReadsRaw[complete.cases(ReadsRaw),]
myvalues$ReadsRaw=ReadsRaw
myvalues$metaRaw=metaRaw
myvalues$ReadsRaw
myvalues=c()
myvalues$ReadsRaw=ReadsRaw
myvalues$metaRaw=metaRaw
metaRaw <- myvalues$metaRaw
Reads <- myvalues$ReadsRaw
metaRaw <- remove_rownames(metaRaw)
metaRaw <- column_to_rownames(metaRaw, input$sampleID)
req(input$target)
meta <- metaRaw[!is.na(metaRaw[,input$target]),]
Samples <- intersect(colnames(Reads), rownames(meta))
meta <-  meta[Samples, ]
Reads <- Reads[,Samples]
meta$group <- as.factor(meta[,input$target])
meta$group <- meta$group %>% relevel(ref=input$treatment)
meta$totalReads <- colSums(Reads, na.rm=T)
idxRm <- meta$totalReads < as.numeric(input$reads.cutoff)
Remove <- colnames(Reads)[idxRm]
Reads <- Reads[,!idxRm]
meta <- meta[!idxRm,]
covars = input$covariates
exclude = names(which(apply(meta %>% select(all_of(covars)), 2, function(x){length(unique(x))})==1))
covars=covars[! covars %in% exclude]
if(length(input$covariates)>0){
modelform=as.formula(paste0("~1+",paste0(covars, sep="", collapse="+"), "+group"))
}else {
modelform=as.formula("~group")
}
dds <- DESeqDataSetFromMatrix(Reads, colData = meta, design = modelform)
keep <- rowSums(counts(dds)) >= input$mincount
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- DESeq(dds, fitType = "local", test = "Wald")
NReads <- counts(dds, normalized=T)
cs <- colSums(log(NReads+1))
options(contrasts = c("contr.sum","contr.poly"))
mod <- lm(cs~ meta$group)
AOV <- drop1(mod, .~., test="F")
p.val <- AOV$`Pr(>F)`[2]
sig <- c()
if(p.val>0.05){
sig="not-significant"
} else {
sig="significant"
}
res <- compareGroups::compareGroups(group ~ ., meta[,c("group",input$target, input$covariates)])
restab <- createTable(res, hide.no = "no")
restab_DEseq <- results(dds)
restab_DEseq <- restab_DEseq[order(restab_DEseq$pvalue),]
myvalues$dds=dds
myvalues$meta=meta
myvalues$Reads=Reads
myvalues$NReads=NReads
myvalues$exclude=exclude
myvalues$sigReaddiff=sig
myvalues$covariateComp=restab
myvalues$Remove=Remove
myvalues$restab_DEseq=restab_DEseq
metaplot<- colData(myvalues[["dds"]])
metaplot <- metaplot[,c("group",input$covariates)] %>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.logical, as.character)%>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.character, as.factor)%>% as.data.frame()
DistM<-as.matrix(dist(t(log(myvalues$NReads+1)),
method = "euclidean"))
colors<-viridis(255)
rownames(metaplot) <- colnames(DistM)
pheatmap(DistM,main = "sample similarity all miRNAs",
col=colors,
annotation_row = as.data.frame(metaplot),
annotation_col = as.data.frame(metaplot))
metaplot<- colData(myvalues[["dds"]])
metaplot <- metaplot[,c("group",input$covariates)] %>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.logical, as.character)%>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.character, as.factor)%>% as.data.frame()
DistM<-as.matrix(dist(t(log(myvalues$NReads+1)),
method = "euclidean"))
colors<-viridis(255)
rownames(metaplot) <- colnames(DistM)
pheatmap(DistM,main = "sample similarity all miRNAs",
col=colors,
annotation_row = as.data.frame(metaplot),
annotation_col = as.data.frame(metaplot))
metaplot<- colData(myvalues[["dds"]])
metaplot <- metaplot[,c("group",input$covariates)] %>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.logical, as.character)%>% as.data.frame()
metaplot <- metaplot %>% mutate_if(is.character, as.factor)%>% as.data.frame()
DistM<-as.matrix(dist(t(log(myvalues$NReads+1)),
method = "euclidean"))
colors<-viridis(255)
rownames(metaplot) <- colnames(DistM)
pheatmap(DistM,main = "sample similarity all miRNAs",
col=colors,
annotation_row = as.data.frame(metaplot),
annotation_col = as.data.frame(metaplot))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
par(mfrow(c(1,2)))
heatmap.2(myvalues$NReads[myvalues$targetmirs,],
main="Sample corr of miRNAs",
col = virids(100),
trace="n",
scale = "row",
density.info ="n",
ColSideColors = AGCcol[1+as.numeric(myvalues$meta$group)],
mar=c(8,8))
legend("topright",
legend = sort(unique(myvalues$meta$group)),
pch=15, col = AGCcol[1+c(1:length(unique(myvalues$meta$group)))],
cex = 0.7, xpd=T, bty="n")
miRCo=cor(t(myvalues$NReads[myvalues$targetmirs,]), method = "s")
heatmap.2(miRCo,
main="correlation of significant miRNAs",
col = viridis(100),
trace="n",
density.info ="n", mar=c(8,8)
runApp()
runApp()
sum(apply(Reads, 1, function(x){prod(x>=5)}))
sum(apply(Reads, 1, function(x){sum(x>=5)>ncol(Reads)*0.5}))
sum(apply(Reads, 1, function(x){prod(x>=5)}))
Confoundertext=paste0(input$covariates, collapse=", ")
Confoundertext
myvalues$Confoundertext=paste0(myvalues$covars, collapse=", ")
runApp()
sum(meta$totalReads)
round(sum(meta$totalReads)/10e5,digits = 1)
myvalues$AVNreads=formatC(sum(meta$totalReads)/ncol(Reads), big.mark=",", format="fg")
myvalues$AVNreads
nrow(Reads)
runApp()
library(visNetwork)
## graph networks
myvalues$miRCo=cor(t(NReads[myvalues$targetmirs,]), method = "s")
CorMAT = myvalues$miRCo
resSig = restab_DEseq[myvalues$targetmirs,]
CorMAT[ (CorMAT) < cor.cut] <- 0
CorMAT[ (CorMAT) < input$cor.cut] <- 0
diag(CorMAT) <- 0
graph <- graph.adjacency(CorMAT, weighted=TRUE, mode="lower")
library(igraph)
graph <- graph.adjacency(CorMAT, weighted=TRUE, mode="lower")
E(graph)
input$cor.cut
## graph networks
myvalues$miRCo=cor(t(NReads[myvalues$targetmirs,]), method = "s")
hist( myvalues$miRCo)
myvalues$miRCo
myvalues$targetmirs
myvalues$sigNum=sum(restab_DEseq$padj<=input$p.cut, na.rm=T)
myvalues$sigNumup=sum(restab_DEseq$padj<=input$p.cut & restab_DEseq$log2FoldChange>0, na.rm=T)
myvalues$sigNumdwn=sum(restab_DEseq$padj<=input$p.cut  & restab_DEseq$log2FoldChange<0, na.rm=T)
myvalues$nomsigNum=sum(restab_DEseq$pvalue<=input$p.cut, na.rm=T)
myvalues$nomsigNumup=sum(restab_DEseq$pvalue<=input$p.cut& restab_DEseq$log2FoldChange>0, na.rm=T)
myvalues$nomsigNumdwn=sum(restab_DEseq$pvalue<=input$p.cut& restab_DEseq$log2FoldChange<0, na.rm=T)
myvalues$sigNum
if(myvalues$sigNum>=input$minInNetwork){
myvalues$GraphAnal="adjusted p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$padj<=input$p.cut)]
} else {
myvalues$GraphAnal="nominal p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$pvalue<=input$p.cut)]}
myvalues$sigNum=sum(restab_DEseq$padj<=input$p.cut, na.rm=T)
myvalues$sigNumup=sum(restab_DEseq$padj<=input$p.cut & restab_DEseq$log2FoldChange>0, na.rm=T)
myvalues$sigNumdwn=sum(restab_DEseq$padj<=input$p.cut  & restab_DEseq$log2FoldChange<0, na.rm=T)
myvalues$nomsigNum=sum(restab_DEseq$pvalue<=input$p.cut, na.rm=T)
myvalues$nomsigNumup=sum(restab_DEseq$pvalue<=input$p.cut& restab_DEseq$log2FoldChange>0, na.rm=T)
myvalues$nomsigNumdwn=sum(restab_DEseq$pvalue<=input$p.cut& restab_DEseq$log2FoldChange<0, na.rm=T)
if(myvalues$sigNum>=input$minInNetwork){
myvalues$GraphAnal="adjusted p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$padj<=input$p.cut)]
} else {
myvalues$GraphAnal="nominal p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$pvalue<=input$p.cut)]}
input$minInNetwork
input$minInNetwork = 50
if(myvalues$sigNum>=input$minInNetwork){
myvalues$GraphAnal="adjusted p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$padj<=input$p.cut)]
} else {
myvalues$GraphAnal="nominal p-value"
myvalues$targetmirs=rownames(restab_DEseq)[which(restab_DEseq$pvalue<=input$p.cut)]}
## graph networks
myvalues$miRCo=cor(t(NReads[myvalues$targetmirs,]), method = "s")
myvalues$miRCo
CorMAT = myvalues$miRCo
CorMAT[ abs(CorMAT) < input$cor.cut] <- 0
diag(CorMAT) <- 0
hist(CorMAT)
graph <- graph.adjacency(CorMAT, weighted=TRUE, mode="lower")
E(graph)
E(graph) %>%  as.data.frame()
CEB=cluster_edge_betweenness(graph, directed=F)
CorMAT[ abs(CorMAT) < input$cor.cut] <- 0
CorMAT = myvalues$miRCo
resSig = restab_DEseq[myvalues$targetmirs,]
CorMAT[ (CorMAT) < input$cor.cut] <- 0
diag(CorMAT) <- 0
graph <- graph.adjacency(CorMAT, weighted=TRUE, mode="lower")
CEB=cluster_edge_betweenness(graph, directed=F)
CEB
rbPal <- colorRampPalette(c("red","green"))
FCsig=resSig$log2FoldChange
FCsig[is.infinite(FCsig)]=NA
if(length(unique(meta$group))==2){
LFCbnd=max(abs((FCsig)), na.rm=T)
LFCsym=c(-LFCbnd, LFCbnd, FCsig)
cols=rbPal(11)[as.numeric(cut(LFCsym, breaks=11))]
cols=cols[-(1:2)]
V(graph)$color=cols
labsub="green=up-regulated, red=down-regulated"} else {
V(graph)$color=AGCcol[membership(CEB)]
labsub="colors = membership"
}
V(graph)$size=-log10(resSig$pvalue)
plab=formatC(resSig$padj,format = "e", digits = 1)
plab[resSig$padj>0.1]=""
mirname=V(graph)$name
V(graph)$name= paste(plab, "\n",V(graph)$name)
V(graph)$size=V(graph)$size
V(graph)$label.cex=1
V(graph)$label.color=AGCcol[membership(CEB)]
V(graph)$label.dist=2
unique(meta$group)
length(unique(meta$group))==2
if(length(unique(meta$group))==2){
LFCbnd=max(abs((FCsig)), na.rm=T)
LFCsym=c(-LFCbnd, LFCbnd, FCsig)
cols=rbPal(11)[as.numeric(cut(LFCsym, breaks=11))]
cols=cols[-(1:2)]
V(graph)$color=cols
labsub="green=up-regulated, red=down-regulated"} else {
V(graph)$color=AGCcol[membership(CEB)]
labsub="colors = membership"
}
AGCcol=RColorBrewer::brewer.pal(8,"Dark2")
V(graph)$label.color=AGCcol[membership(CEB)]
V(graph)$label.dist=2
E(graph)$width=(E(graph)$weight^5)*10
layout=layout.fruchterman.reingold(graph, niter=10000)
plot(graph)
get.edgelist(graph)
visIgraph(graph)
toVisNetworkData(graph)
-log10(resSig$pvalue)
myvalues$graph = graph
runApp()
### helper
local({
r <- getOption("repos")
r["CRAN"] <- "https://cran.rstudio.com/"
r["BioCsoft"] <- "https://bioconductor.org/packages/release/bioc"
r["BioCann"] <- "https://bioconductor.org/packages/release/data/annotation"
r["BioCexp"] <- "https://bioconductor.org/packages/release/data/experiment"
options(repos = r)
})
